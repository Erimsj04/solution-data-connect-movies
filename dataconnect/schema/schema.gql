type Movie @table {
  id: String!
  title: String!
  posterUrl: String!
  releaseDate: Date!
  genre: String!
  description: String
  tags: [String]
  embedding: Vector @col(size: 768) # Enables vector search
}

type Role @table(key: ["movie", "actor"]) {
  movie: Movie!
  actor: Actor!
  character: String
  description: String
}

type Actor @table {
  id: String!
  name: String!
  imageUrl: String!
  birthDate: Date!
}

type User @table(key: "uid") {
  uid: String! @default(expr: "uuidV4()")
  username: String!
}

type Watch @table {
  movie: Movie!
  user: User!
  "one of 'theater-premium' (IMAX), 'theater', 'home', 'mobile'"
  format: String
  watchDate: Date! @default(expr: "request.time")
  "A watch can optionally be associated with a review."
  review: Review
}

type Review @table {
  user: User!
  movie: Movie!
  "Integer between 0-10 corresponding to a star rating (0 = 0 stars, 5 = 2.5 stars, 10 = 5 stars)"
  rating: Int!
  review: String
  reviewTime: Timestamp! @default(expr: "request.time")
  embedding: Vector @col(size: 768)
}

type MovieStats
  @view(
    sql: """
    SELECT
      r.movie_id,
      COUNT(r.*) AS review_count,
      AVG(r.rating) AS avg_rating,
      COUNT(w.*) AS watch_count
    FROM review r
    LEFT JOIN watch w ON r.movie_id = w.movie_id
    GROUP BY r.movie_id
    """
  ) {
  movie: Movie @unique
  watchCount: Int
  reviewCount: Int
  avgRating: Float
}
